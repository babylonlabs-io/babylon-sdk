// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylonlabs/babylon/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgInstantiateBabylonContracts is the Msg/InstantiateBabylonContracts request
// type.
type MsgInstantiateBabylonContracts struct {
	// signer is the address who submits the message.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// babylon_contract_code_id is the code ID for the Babylon contract.
	BabylonContractCodeId uint64 `protobuf:"varint,2,opt,name=babylon_contract_code_id,json=babylonContractCodeId,proto3" json:"babylon_contract_code_id,omitempty"`
	// btc_light_client_contract_code_id is the code ID for the BTC light client
	// contract.
	BtcLightClientContractCodeId uint64 `protobuf:"varint,3,opt,name=btc_light_client_contract_code_id,json=btcLightClientContractCodeId,proto3" json:"btc_light_client_contract_code_id,omitempty"`
	// btc_staking_contract_code_id is the code ID for the BTC staking contract.
	BtcStakingContractCodeId uint64 `protobuf:"varint,4,opt,name=btc_staking_contract_code_id,json=btcStakingContractCodeId,proto3" json:"btc_staking_contract_code_id,omitempty"`
	// btc_finality_contract_code_id is the code ID for the BTC finality contract.
	BtcFinalityContractCodeId uint64 `protobuf:"varint,5,opt,name=btc_finality_contract_code_id,json=btcFinalityContractCodeId,proto3" json:"btc_finality_contract_code_id,omitempty"`
	// network is the Bitcoin network to connect to (e.g. "regtest", "testnet",
	// "mainnet")
	Network string `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	// babylon_tag is a unique identifier for this Babylon instance
	BabylonTag string `protobuf:"bytes,7,opt,name=babylon_tag,json=babylonTag,proto3" json:"babylon_tag,omitempty"`
	// btc_confirmation_depth is the number of confirmations required for Bitcoin
	// transactions
	BtcConfirmationDepth uint32 `protobuf:"varint,8,opt,name=btc_confirmation_depth,json=btcConfirmationDepth,proto3" json:"btc_confirmation_depth,omitempty"`
	// checkpoint_finalization_timeout is the timeout in blocks for checkpoint
	// finalization
	CheckpointFinalizationTimeout uint32 `protobuf:"varint,9,opt,name=checkpoint_finalization_timeout,json=checkpointFinalizationTimeout,proto3" json:"checkpoint_finalization_timeout,omitempty"`
	// notify_cosmos_zone indicates whether to notify the Cosmos zone of events
	NotifyCosmosZone bool `protobuf:"varint,10,opt,name=notify_cosmos_zone,json=notifyCosmosZone,proto3" json:"notify_cosmos_zone,omitempty"`
	// ibc_transfer_channel_id is the IBC channel ID for the IBC transfer
	// contract. If empty then the reward distribution will be done at the consumer
	// side.
	IbcTransferChannelId string `protobuf:"bytes,11,opt,name=ibc_transfer_channel_id,json=ibcTransferChannelId,proto3" json:"ibc_transfer_channel_id,omitempty"`
	// btc_light_client_msg is the initialization message for the BTC light client
	// contract
	BtcLightClientMsg []byte `protobuf:"bytes,12,opt,name=btc_light_client_msg,json=btcLightClientMsg,proto3" json:"btc_light_client_msg,omitempty"`
	// btc_staking_msg is the initialization message for the BTC staking contract
	BtcStakingMsg []byte `protobuf:"bytes,13,opt,name=btc_staking_msg,json=btcStakingMsg,proto3" json:"btc_staking_msg,omitempty"`
	// btc_finality_msg is the initialization message for the BTC finality
	// contract
	BtcFinalityMsg []byte `protobuf:"bytes,14,opt,name=btc_finality_msg,json=btcFinalityMsg,proto3" json:"btc_finality_msg,omitempty"`
	// consumer_name is the name of this consumer chain
	ConsumerName string `protobuf:"bytes,15,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// consumer_description is a description of this consumer chain
	ConsumerDescription string `protobuf:"bytes,16,opt,name=consumer_description,json=consumerDescription,proto3" json:"consumer_description,omitempty"`
	// admin is the address that controls the Babylon module
	Admin string `protobuf:"bytes,17,opt,name=admin,proto3" json:"admin,omitempty"`
	// initial_header is the initial BTC header for the light client
	InitialHeader string `protobuf:"bytes,18,opt,name=initial_header,json=initialHeader,proto3" json:"initial_header,omitempty"`
}

func (m *MsgInstantiateBabylonContracts) Reset()         { *m = MsgInstantiateBabylonContracts{} }
func (m *MsgInstantiateBabylonContracts) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateBabylonContracts) ProtoMessage()    {}
func (*MsgInstantiateBabylonContracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_406c9f025b2f9448, []int{0}
}
func (m *MsgInstantiateBabylonContracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateBabylonContracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateBabylonContracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateBabylonContracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateBabylonContracts.Merge(m, src)
}
func (m *MsgInstantiateBabylonContracts) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateBabylonContracts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateBabylonContracts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateBabylonContracts proto.InternalMessageInfo

// MsgInstantiateBabylonContractsResponse is the Msg/InstantiateBabylonContracts
// response type.
type MsgInstantiateBabylonContractsResponse struct {
}

func (m *MsgInstantiateBabylonContractsResponse) Reset() {
	*m = MsgInstantiateBabylonContractsResponse{}
}
func (m *MsgInstantiateBabylonContractsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateBabylonContractsResponse) ProtoMessage()    {}
func (*MsgInstantiateBabylonContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_406c9f025b2f9448, []int{1}
}
func (m *MsgInstantiateBabylonContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateBabylonContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateBabylonContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateBabylonContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateBabylonContractsResponse.Merge(m, src)
}
func (m *MsgInstantiateBabylonContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateBabylonContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateBabylonContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateBabylonContractsResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/auth parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_406c9f025b2f9448, []int{2}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_406c9f025b2f9448, []int{3}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInstantiateBabylonContracts)(nil), "babylonlabs.babylon.v1beta1.MsgInstantiateBabylonContracts")
	proto.RegisterType((*MsgInstantiateBabylonContractsResponse)(nil), "babylonlabs.babylon.v1beta1.MsgInstantiateBabylonContractsResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "babylonlabs.babylon.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "babylonlabs.babylon.v1beta1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("babylonlabs/babylon/v1beta1/tx.proto", fileDescriptor_406c9f025b2f9448)
}

var fileDescriptor_406c9f025b2f9448 = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0x6d, 0x7e, 0x34, 0x63, 0x3b, 0x49, 0x07, 0x43, 0x36, 0x2e, 0xdd, 0x18, 0x17,
	0x55, 0xa6, 0x6a, 0xbc, 0xb8, 0xb4, 0x20, 0x15, 0x09, 0x51, 0xbb, 0x0a, 0x8a, 0x44, 0x10, 0xda,
	0x84, 0x4b, 0x2f, 0xab, 0xd9, 0xd9, 0xf1, 0x7a, 0x64, 0xef, 0xcc, 0x6a, 0xe7, 0xb9, 0xd4, 0x3d,
	0x21, 0xce, 0x1c, 0xf8, 0x03, 0x90, 0x90, 0xf8, 0x0b, 0x7a, 0xe0, 0x8f, 0xc8, 0xb1, 0xe2, 0xc4,
	0x09, 0x41, 0x72, 0xe8, 0xbf, 0x81, 0x66, 0x76, 0xb7, 0xfe, 0x25, 0x39, 0x42, 0x9c, 0x3c, 0xb3,
	0xdf, 0xcf, 0xfb, 0xbe, 0x37, 0xef, 0x79, 0x06, 0x7d, 0x18, 0x90, 0x60, 0x32, 0x92, 0x62, 0x44,
	0x02, 0xe5, 0xe6, 0x6b, 0xf7, 0x79, 0x27, 0x60, 0x40, 0x3a, 0x2e, 0xbc, 0x68, 0x27, 0xa9, 0x04,
	0x89, 0x6f, 0xcd, 0x50, 0xed, 0x7c, 0xdd, 0xce, 0xa9, 0x7a, 0x2d, 0x92, 0x91, 0x34, 0x9c, 0xab,
	0x57, 0x59, 0x48, 0x7d, 0x8f, 0x4a, 0x15, 0x4b, 0xe5, 0xc6, 0x2a, 0x72, 0x9f, 0x77, 0xf4, 0x4f,
	0x2e, 0xec, 0x67, 0x82, 0x9f, 0x45, 0x64, 0x9b, 0x5c, 0xfa, 0x68, 0x55, 0x31, 0x45, 0x5a, 0x83,
	0x36, 0x7f, 0xda, 0x44, 0xce, 0x89, 0x8a, 0x8e, 0x85, 0x02, 0x22, 0x80, 0x13, 0x60, 0xdd, 0x4c,
	0xef, 0x49, 0x01, 0x29, 0xa1, 0xa0, 0xf0, 0xc7, 0x68, 0x43, 0xf1, 0x48, 0xb0, 0xd4, 0xb6, 0x1a,
	0x56, 0x6b, 0xab, 0x6b, 0xff, 0xf1, 0xfb, 0x61, 0x2d, 0xcf, 0xf7, 0x24, 0x0c, 0x53, 0xa6, 0xd4,
	0x29, 0xa4, 0x5c, 0x44, 0x5e, 0xce, 0xe1, 0xcf, 0x90, 0x9d, 0x67, 0xf1, 0x69, 0x6e, 0xe3, 0x53,
	0x19, 0x32, 0x9f, 0x87, 0xf6, 0xb5, 0x86, 0xd5, 0x5a, 0xf3, 0xde, 0x0d, 0xe6, 0xb3, 0xf4, 0x64,
	0xc8, 0x8e, 0x43, 0xfc, 0x15, 0xfa, 0x20, 0x00, 0xea, 0x8f, 0x78, 0x34, 0x00, 0x9f, 0x8e, 0x38,
	0x13, 0xb0, 0xec, 0x70, 0xdd, 0x38, 0xbc, 0x1f, 0x00, 0xfd, 0x5a, 0x73, 0x3d, 0x83, 0x2d, 0x18,
	0x7d, 0x81, 0xb4, 0xee, 0x2b, 0x20, 0x43, 0x2e, 0xa2, 0x65, 0x8f, 0x35, 0xe3, 0x61, 0x07, 0x40,
	0x4f, 0x33, 0x64, 0x21, 0xfe, 0x4b, 0x74, 0x5b, 0xc7, 0xf7, 0xb9, 0x20, 0x23, 0x0e, 0x93, 0x65,
	0x83, 0x75, 0x63, 0xb0, 0x1f, 0x00, 0x3d, 0xca, 0x99, 0x05, 0x07, 0x1b, 0x6d, 0x0a, 0x06, 0xdf,
	0xcb, 0x74, 0x68, 0x6f, 0xe8, 0xb6, 0x79, 0xc5, 0x16, 0x1f, 0xa0, 0x72, 0xd1, 0x1d, 0x20, 0x91,
	0xbd, 0x69, 0x54, 0x94, 0x7f, 0x3a, 0x23, 0x11, 0x7e, 0x88, 0xde, 0xd3, 0xc9, 0xa9, 0x14, 0x7d,
	0x9e, 0xc6, 0x04, 0xb8, 0x14, 0x7e, 0xc8, 0x12, 0x18, 0xd8, 0x37, 0x1a, 0x56, 0xab, 0xea, 0xd5,
	0x02, 0xa0, 0xbd, 0x19, 0xf1, 0xa9, 0xd6, 0xf0, 0x11, 0x3a, 0xa0, 0x03, 0x46, 0x87, 0x89, 0xe4,
	0x02, 0xf2, 0xca, 0x5f, 0x66, 0xc1, 0xc0, 0x63, 0x26, 0xc7, 0x60, 0x6f, 0x99, 0xf0, 0xdb, 0x53,
	0xec, 0x68, 0x86, 0x3a, 0xcb, 0x20, 0x7c, 0x1f, 0x61, 0x21, 0x81, 0xf7, 0xf5, 0xa1, 0xcd, 0x1f,
	0xec, 0xa5, 0x14, 0xcc, 0x46, 0x0d, 0xab, 0x75, 0xc3, 0xdb, 0xcd, 0x94, 0x9e, 0x11, 0x9e, 0x49,
	0xc1, 0xf0, 0x23, 0xb4, 0xc7, 0x03, 0xea, 0x43, 0x4a, 0x84, 0xea, 0xb3, 0xd4, 0xa7, 0x03, 0x22,
	0x04, 0x1b, 0xe9, 0x16, 0x95, 0xcd, 0xc1, 0x6a, 0x3c, 0xa0, 0x67, 0xb9, 0xda, 0xcb, 0xc4, 0xe3,
	0x10, 0xbb, 0xa8, 0xb6, 0x34, 0xe8, 0x58, 0x45, 0x76, 0xa5, 0x61, 0xb5, 0x2a, 0xde, 0xcd, 0xf9,
	0xd9, 0x9e, 0xa8, 0x08, 0xdf, 0x45, 0x3b, 0xb3, 0x03, 0xd5, 0x6c, 0xd5, 0xb0, 0xd5, 0xe9, 0x0c,
	0x35, 0xd7, 0x42, 0xbb, 0x73, 0x83, 0xd3, 0xe0, 0xb6, 0x01, 0xb7, 0x67, 0x66, 0xa5, 0xc9, 0x3b,
	0xa8, 0x4a, 0xa5, 0x50, 0xe3, 0x98, 0xa5, 0xbe, 0x20, 0x31, 0xb3, 0x77, 0x4c, 0xbd, 0x95, 0xe2,
	0xe3, 0x37, 0x24, 0x66, 0xb8, 0x83, 0x6a, 0x6f, 0xa1, 0x90, 0x29, 0x9a, 0xf2, 0x44, 0xf7, 0xca,
	0xde, 0x35, 0xec, 0x3b, 0x85, 0xf6, 0x74, 0x2a, 0xe1, 0x36, 0x5a, 0x27, 0x61, 0xcc, 0x85, 0x7d,
	0xf3, 0x8a, 0xdb, 0x92, 0x61, 0x8f, 0xcb, 0x3f, 0xbe, 0x79, 0x75, 0x2f, 0xbf, 0x39, 0xcd, 0x16,
	0xba, 0xbb, 0xfa, 0x36, 0x7a, 0x4c, 0x25, 0x52, 0x28, 0xd6, 0xfc, 0xc5, 0x42, 0x3b, 0x27, 0x2a,
	0xfa, 0x2e, 0x09, 0x09, 0xb0, 0x6f, 0x49, 0x4a, 0x62, 0x85, 0x3f, 0x45, 0x5b, 0x64, 0x0c, 0x03,
	0x99, 0x72, 0x98, 0x5c, 0x79, 0x59, 0xa7, 0x28, 0x7e, 0x82, 0x36, 0x12, 0xe3, 0x60, 0x6e, 0x67,
	0xf9, 0xc1, 0x9d, 0xf6, 0x8a, 0x77, 0xaa, 0x9d, 0x25, 0xeb, 0xae, 0x9d, 0xff, 0x75, 0x50, 0xf2,
	0xf2, 0xc0, 0xc7, 0xdb, 0xfa, 0x14, 0x53, 0xcb, 0xe6, 0x3e, 0xda, 0x5b, 0xa8, 0xae, 0xa8, 0xfc,
	0xc1, 0x6f, 0xd7, 0xd0, 0x75, 0x3d, 0x80, 0x5f, 0x2d, 0x74, 0x6b, 0xd5, 0xbb, 0xf3, 0xf9, 0xca,
	0x2a, 0x56, 0xb7, 0xa9, 0xde, 0xfb, 0x1f, 0xc1, 0x45, 0xa5, 0x38, 0x45, 0x95, 0xb9, 0xfe, 0xde,
	0xbf, 0xca, 0x74, 0x96, 0xae, 0x3f, 0xfc, 0x2f, 0x74, 0x91, 0xb3, 0xbe, 0xfe, 0xc3, 0x9b, 0x57,
	0xf7, 0xac, 0xee, 0xe9, 0xf9, 0x3f, 0x4e, 0xe9, 0xfc, 0xc2, 0xb1, 0x5e, 0x5f, 0x38, 0xd6, 0xdf,
	0x17, 0x8e, 0xf5, 0xf3, 0xa5, 0x53, 0x7a, 0x7d, 0xe9, 0x94, 0xfe, 0xbc, 0x74, 0x4a, 0xcf, 0x1e,
	0x45, 0x1c, 0x06, 0xe3, 0xa0, 0x4d, 0x65, 0xec, 0xce, 0x24, 0x39, 0xe4, 0xb2, 0xd8, 0x1e, 0xaa,
	0x70, 0xe8, 0xbe, 0x78, 0xfb, 0xf8, 0xc3, 0x24, 0x61, 0x2a, 0xd8, 0x30, 0x6f, 0xfe, 0x27, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x15, 0x6b, 0xbc, 0x23, 0xad, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// InstantiateBabylonContracts defines an operation for instantiating the
	// Babylon contracts.
	InstantiateBabylonContracts(ctx context.Context, in *MsgInstantiateBabylonContracts, opts ...grpc.CallOption) (*MsgInstantiateBabylonContractsResponse, error)
	// UpdateParams defines a (governance) operation for updating the x/auth
	// module parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InstantiateBabylonContracts(ctx context.Context, in *MsgInstantiateBabylonContracts, opts ...grpc.CallOption) (*MsgInstantiateBabylonContractsResponse, error) {
	out := new(MsgInstantiateBabylonContractsResponse)
	err := c.cc.Invoke(ctx, "/babylonlabs.babylon.v1beta1.Msg/InstantiateBabylonContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/babylonlabs.babylon.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// InstantiateBabylonContracts defines an operation for instantiating the
	// Babylon contracts.
	InstantiateBabylonContracts(context.Context, *MsgInstantiateBabylonContracts) (*MsgInstantiateBabylonContractsResponse, error)
	// UpdateParams defines a (governance) operation for updating the x/auth
	// module parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InstantiateBabylonContracts(ctx context.Context, req *MsgInstantiateBabylonContracts) (*MsgInstantiateBabylonContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantiateBabylonContracts not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InstantiateBabylonContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInstantiateBabylonContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InstantiateBabylonContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylonlabs.babylon.v1beta1.Msg/InstantiateBabylonContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InstantiateBabylonContracts(ctx, req.(*MsgInstantiateBabylonContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylonlabs.babylon.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylonlabs.babylon.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstantiateBabylonContracts",
			Handler:    _Msg_InstantiateBabylonContracts_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylonlabs/babylon/v1beta1/tx.proto",
}

func (m *MsgInstantiateBabylonContracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateBabylonContracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateBabylonContracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ConsumerDescription) > 0 {
		i -= len(m.ConsumerDescription)
		copy(dAtA[i:], m.ConsumerDescription)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerDescription)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ConsumerName) > 0 {
		i -= len(m.ConsumerName)
		copy(dAtA[i:], m.ConsumerName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.BtcFinalityMsg) > 0 {
		i -= len(m.BtcFinalityMsg)
		copy(dAtA[i:], m.BtcFinalityMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcFinalityMsg)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.BtcStakingMsg) > 0 {
		i -= len(m.BtcStakingMsg)
		copy(dAtA[i:], m.BtcStakingMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcStakingMsg)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.BtcLightClientMsg) > 0 {
		i -= len(m.BtcLightClientMsg)
		copy(dAtA[i:], m.BtcLightClientMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcLightClientMsg)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.IbcTransferChannelId) > 0 {
		i -= len(m.IbcTransferChannelId)
		copy(dAtA[i:], m.IbcTransferChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IbcTransferChannelId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NotifyCosmosZone {
		i--
		if m.NotifyCosmosZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CheckpointFinalizationTimeout != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CheckpointFinalizationTimeout))
		i--
		dAtA[i] = 0x48
	}
	if m.BtcConfirmationDepth != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcConfirmationDepth))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BabylonTag) > 0 {
		i -= len(m.BabylonTag)
		copy(dAtA[i:], m.BabylonTag)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BabylonTag)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x32
	}
	if m.BtcFinalityContractCodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcFinalityContractCodeId))
		i--
		dAtA[i] = 0x28
	}
	if m.BtcStakingContractCodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcStakingContractCodeId))
		i--
		dAtA[i] = 0x20
	}
	if m.BtcLightClientContractCodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BtcLightClientContractCodeId))
		i--
		dAtA[i] = 0x18
	}
	if m.BabylonContractCodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BabylonContractCodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInstantiateBabylonContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateBabylonContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateBabylonContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInstantiateBabylonContracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BabylonContractCodeId != 0 {
		n += 1 + sovTx(uint64(m.BabylonContractCodeId))
	}
	if m.BtcLightClientContractCodeId != 0 {
		n += 1 + sovTx(uint64(m.BtcLightClientContractCodeId))
	}
	if m.BtcStakingContractCodeId != 0 {
		n += 1 + sovTx(uint64(m.BtcStakingContractCodeId))
	}
	if m.BtcFinalityContractCodeId != 0 {
		n += 1 + sovTx(uint64(m.BtcFinalityContractCodeId))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BabylonTag)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BtcConfirmationDepth != 0 {
		n += 1 + sovTx(uint64(m.BtcConfirmationDepth))
	}
	if m.CheckpointFinalizationTimeout != 0 {
		n += 1 + sovTx(uint64(m.CheckpointFinalizationTimeout))
	}
	if m.NotifyCosmosZone {
		n += 2
	}
	l = len(m.IbcTransferChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcLightClientMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcStakingMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcFinalityMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConsumerName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConsumerDescription)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInstantiateBabylonContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInstantiateBabylonContracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateBabylonContracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateBabylonContracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonContractCodeId", wireType)
			}
			m.BabylonContractCodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonContractCodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcLightClientContractCodeId", wireType)
			}
			m.BtcLightClientContractCodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcLightClientContractCodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingContractCodeId", wireType)
			}
			m.BtcStakingContractCodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcStakingContractCodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcFinalityContractCodeId", wireType)
			}
			m.BtcFinalityContractCodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcFinalityContractCodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcConfirmationDepth", wireType)
			}
			m.BtcConfirmationDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcConfirmationDepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointFinalizationTimeout", wireType)
			}
			m.CheckpointFinalizationTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointFinalizationTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCosmosZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyCosmosZone = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcTransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcLightClientMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcLightClientMsg = append(m.BtcLightClientMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcLightClientMsg == nil {
				m.BtcLightClientMsg = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcStakingMsg = append(m.BtcStakingMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcStakingMsg == nil {
				m.BtcStakingMsg = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcFinalityMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcFinalityMsg = append(m.BtcFinalityMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcFinalityMsg == nil {
				m.BtcFinalityMsg = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstantiateBabylonContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateBabylonContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateBabylonContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
