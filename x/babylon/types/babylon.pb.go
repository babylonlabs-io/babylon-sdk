// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylonlabs/babylon/v1beta1/babylon.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/babylon module.
type Params struct {
	// max_gas_begin_blocker defines the maximum gas that can be spent in a
	// contract sudo callback
	MaxGasBeginBlocker uint32 `protobuf:"varint,1,opt,name=max_gas_begin_blocker,json=maxGasBeginBlocker,proto3" json:"max_gas_begin_blocker,omitempty"`
	// btc_staking_portion is the portion of rewards that goes to Finality
	// Providers/delegations NOTE: the portion of each Finality
	// Provider/delegation is calculated by using its voting power and finality
	// provider's commission
	BtcStakingPortion cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=btc_staking_portion,json=btcStakingPortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"btc_staking_portion"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb75d1c9a41f85f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// BSNContracts holds all four contract addresses for the Babylon module.
type BSNContracts struct {
	BabylonContract        string `protobuf:"bytes,1,opt,name=babylon_contract,json=babylonContract,proto3" json:"babylon_contract,omitempty"`
	BtcLightClientContract string `protobuf:"bytes,2,opt,name=btc_light_client_contract,json=btcLightClientContract,proto3" json:"btc_light_client_contract,omitempty"`
	BtcStakingContract     string `protobuf:"bytes,3,opt,name=btc_staking_contract,json=btcStakingContract,proto3" json:"btc_staking_contract,omitempty"`
	BtcFinalityContract    string `protobuf:"bytes,4,opt,name=btc_finality_contract,json=btcFinalityContract,proto3" json:"btc_finality_contract,omitempty"`
}

func (m *BSNContracts) Reset()         { *m = BSNContracts{} }
func (m *BSNContracts) String() string { return proto.CompactTextString(m) }
func (*BSNContracts) ProtoMessage()    {}
func (*BSNContracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb75d1c9a41f85f, []int{1}
}
func (m *BSNContracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BSNContracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BSNContracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BSNContracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BSNContracts.Merge(m, src)
}
func (m *BSNContracts) XXX_Size() int {
	return m.Size()
}
func (m *BSNContracts) XXX_DiscardUnknown() {
	xxx_messageInfo_BSNContracts.DiscardUnknown(m)
}

var xxx_messageInfo_BSNContracts proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "babylonlabs.babylon.v1beta1.Params")
	proto.RegisterType((*BSNContracts)(nil), "babylonlabs.babylon.v1beta1.BSNContracts")
}

func init() {
	proto.RegisterFile("babylonlabs/babylon/v1beta1/babylon.proto", fileDescriptor_9eb75d1c9a41f85f)
}

var fileDescriptor_9eb75d1c9a41f85f = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xef, 0x42, 0x55, 0xa9, 0x16, 0x08, 0x38, 0x52, 0x94, 0xb6, 0x92, 0x53, 0x75, 0x2a,
	0x43, 0xee, 0x14, 0x21, 0x16, 0x36, 0x2e, 0x15, 0x48, 0x28, 0x42, 0x55, 0x32, 0x20, 0xb1, 0x58,
	0xb6, 0x63, 0x1c, 0x2b, 0x77, 0x76, 0x74, 0x7e, 0xa0, 0xe4, 0x5b, 0xf0, 0x11, 0x18, 0x18, 0xf8,
	0x00, 0xfd, 0x04, 0x4c, 0x19, 0xab, 0x4e, 0x88, 0x21, 0x82, 0x64, 0xe1, 0x63, 0x54, 0x17, 0xfb,
	0x2e, 0xd9, 0xb2, 0xbd, 0xe7, 0xff, 0xfb, 0xff, 0xfc, 0x9e, 0xfd, 0xd0, 0x0b, 0x46, 0xd9, 0x3c,
	0x33, 0x3a, 0xa3, 0xcc, 0x26, 0x3e, 0x4e, 0xbe, 0x76, 0x99, 0x00, 0xda, 0xad, 0xf2, 0x78, 0x5a,
	0x18, 0x30, 0xd1, 0xd9, 0x4e, 0x69, 0x5c, 0x49, 0xbe, 0xf4, 0xb4, 0x29, 0x8d, 0x34, 0x9b, 0xba,
	0xa4, 0x8c, 0x9c, 0xe5, 0xf4, 0x84, 0x1b, 0x9b, 0x1b, 0x4b, 0x9c, 0xe0, 0x12, 0x27, 0x5d, 0xfc,
	0x08, 0xd1, 0xe1, 0x35, 0x2d, 0x68, 0x6e, 0xa3, 0x2e, 0x3a, 0xce, 0xe9, 0x8c, 0x48, 0x6a, 0x09,
	0x13, 0x52, 0x69, 0xc2, 0x32, 0xc3, 0x27, 0xa2, 0x68, 0x85, 0xe7, 0xe1, 0xe5, 0xa3, 0x41, 0x94,
	0xd3, 0xd9, 0x3b, 0x6a, 0xd3, 0x52, 0x4a, 0x9d, 0x12, 0x51, 0xf4, 0x8c, 0x01, 0x27, 0x16, 0xe8,
	0x44, 0x69, 0x49, 0xa6, 0xa6, 0x00, 0x65, 0x74, 0xab, 0x71, 0x1e, 0x5e, 0x1e, 0xa5, 0xdd, 0xc5,
	0xb2, 0x1d, 0xfc, 0x59, 0xb6, 0xcf, 0xdc, 0x85, 0x76, 0x34, 0x89, 0x95, 0x49, 0x72, 0x0a, 0xe3,
	0xb8, 0x2f, 0x24, 0xe5, 0xf3, 0x2b, 0xc1, 0xef, 0x6e, 0x3a, 0xc8, 0xf7, 0x73, 0x25, 0xf8, 0xe0,
	0x29, 0x03, 0x3e, 0x74, 0xb0, 0x6b, 0xc7, 0x7a, 0x7d, 0xf0, 0xff, 0x7b, 0x3b, 0xbc, 0xf8, 0xd5,
	0x40, 0x0f, 0xd3, 0xe1, 0x87, 0x9e, 0xd1, 0x50, 0x50, 0x0e, 0x36, 0xea, 0xa1, 0x27, 0x7e, 0x76,
	0xc2, 0xfd, 0xe1, 0xa6, 0xcf, 0xa3, 0xb4, 0x75, 0x77, 0xd3, 0x69, 0x7a, 0xe6, 0x9b, 0xd1, 0xa8,
	0x10, 0xd6, 0x0e, 0xa1, 0x50, 0x5a, 0x0e, 0x1e, 0x7b, 0x47, 0x45, 0x89, 0x86, 0xe8, 0xa4, 0x6c,
	0x3f, 0x53, 0x72, 0x0c, 0x84, 0x67, 0x4a, 0x68, 0xd8, 0xd2, 0x1a, 0x7b, 0x68, 0xcf, 0x19, 0xf0,
	0x7e, 0xe9, 0xec, 0x6d, 0x8c, 0x35, 0xf4, 0x3d, 0x6a, 0xee, 0xbe, 0x49, 0xcd, 0x7b, 0xb0, 0x87,
	0x17, 0x6d, 0x67, 0xaf, 0x59, 0x7d, 0x74, 0x5c, 0xb2, 0x3e, 0x2b, 0x4d, 0x33, 0x05, 0xf3, 0x2d,
	0xec, 0x60, 0x0f, 0xac, 0xfc, 0x96, 0xb7, 0xde, 0x55, 0xd1, 0xd2, 0x8f, 0x8b, 0x7f, 0x38, 0xf8,
	0xb9, 0xc2, 0xc1, 0x62, 0x85, 0xc3, 0xdb, 0x15, 0x0e, 0xff, 0xae, 0x70, 0xf8, 0x6d, 0x8d, 0x83,
	0xdb, 0x35, 0x0e, 0x7e, 0xaf, 0x71, 0xf0, 0xe9, 0x95, 0x54, 0x30, 0xfe, 0xc2, 0x62, 0x6e, 0xf2,
	0x64, 0x67, 0xcd, 0x3a, 0xca, 0x54, 0x69, 0xc7, 0x8e, 0x26, 0xc9, 0xac, 0x5e, 0x51, 0x98, 0x4f,
	0x85, 0x65, 0x87, 0x9b, 0x5d, 0x7a, 0x79, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x15, 0x1e, 0xc3, 0x22,
	0xc6, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxGasBeginBlocker != that1.MaxGasBeginBlocker {
		return false
	}
	if !this.BtcStakingPortion.Equal(that1.BtcStakingPortion) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BtcStakingPortion.Size()
		i -= size
		if _, err := m.BtcStakingPortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBabylon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MaxGasBeginBlocker != 0 {
		i = encodeVarintBabylon(dAtA, i, uint64(m.MaxGasBeginBlocker))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BSNContracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BSNContracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BSNContracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcFinalityContract) > 0 {
		i -= len(m.BtcFinalityContract)
		copy(dAtA[i:], m.BtcFinalityContract)
		i = encodeVarintBabylon(dAtA, i, uint64(len(m.BtcFinalityContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BtcStakingContract) > 0 {
		i -= len(m.BtcStakingContract)
		copy(dAtA[i:], m.BtcStakingContract)
		i = encodeVarintBabylon(dAtA, i, uint64(len(m.BtcStakingContract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtcLightClientContract) > 0 {
		i -= len(m.BtcLightClientContract)
		copy(dAtA[i:], m.BtcLightClientContract)
		i = encodeVarintBabylon(dAtA, i, uint64(len(m.BtcLightClientContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BabylonContract) > 0 {
		i -= len(m.BabylonContract)
		copy(dAtA[i:], m.BabylonContract)
		i = encodeVarintBabylon(dAtA, i, uint64(len(m.BabylonContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBabylon(dAtA []byte, offset int, v uint64) int {
	offset -= sovBabylon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGasBeginBlocker != 0 {
		n += 1 + sovBabylon(uint64(m.MaxGasBeginBlocker))
	}
	l = m.BtcStakingPortion.Size()
	n += 1 + l + sovBabylon(uint64(l))
	return n
}

func (m *BSNContracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BabylonContract)
	if l > 0 {
		n += 1 + l + sovBabylon(uint64(l))
	}
	l = len(m.BtcLightClientContract)
	if l > 0 {
		n += 1 + l + sovBabylon(uint64(l))
	}
	l = len(m.BtcStakingContract)
	if l > 0 {
		n += 1 + l + sovBabylon(uint64(l))
	}
	l = len(m.BtcFinalityContract)
	if l > 0 {
		n += 1 + l + sovBabylon(uint64(l))
	}
	return n
}

func sovBabylon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBabylon(x uint64) (n int) {
	return sovBabylon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBabylon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasBeginBlocker", wireType)
			}
			m.MaxGasBeginBlocker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasBeginBlocker |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingPortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBabylon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBabylon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BtcStakingPortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBabylon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBabylon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BSNContracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBabylon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BSNContracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BSNContracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBabylon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBabylon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcLightClientContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBabylon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBabylon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcLightClientContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBabylon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBabylon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcStakingContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcFinalityContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBabylon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBabylon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcFinalityContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBabylon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBabylon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBabylon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBabylon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBabylon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBabylon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBabylon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBabylon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBabylon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBabylon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBabylon = fmt.Errorf("proto: unexpected end of group")
)
