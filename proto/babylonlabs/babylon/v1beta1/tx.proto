syntax = "proto3";
package babylonlabs.babylon.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "babylonlabs/babylon/v1beta1/babylon.proto";

option go_package = "github.com/babylonlabs-io/babylon-sdk/x/babylon/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the wasm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // InstantiateBabylonContracts defines an operation for instantiating the
  // Babylon contracts.
  rpc InstantiateBabylonContracts(MsgInstantiateBabylonContracts)
      returns (MsgInstantiateBabylonContractsResponse);

  // UpdateParams defines a (governance) operation for updating the x/auth
  // module parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgInstantiateBabylonContracts is the Msg/InstantiateBabylonContracts request
// type.
message MsgInstantiateBabylonContracts {
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the address who submits the message.
  string signer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // babylon_contract_code_id is the code ID for the Babylon contract.
  uint64 babylon_contract_code_id = 2;
  // btc_light_client_contract_code_id is the code ID for the BTC light client
  // contract.
  uint64 btc_light_client_contract_code_id = 3;
  // btc_staking_contract_code_id is the code ID for the BTC staking contract.
  uint64 btc_staking_contract_code_id = 4;
  // btc_finality_contract_code_id is the code ID for the BTC finality contract.
  uint64 btc_finality_contract_code_id = 5;

  // network is the Bitcoin network to connect to (e.g. "regtest", "testnet",
  // "mainnet")
  string network = 6;
  // babylon_tag is a unique identifier for this Babylon instance
  string babylon_tag = 7;
  // btc_confirmation_depth is the number of confirmations required for Bitcoin
  // transactions
  uint32 btc_confirmation_depth = 8;
  // checkpoint_finalization_timeout is the timeout in blocks for checkpoint
  // finalization
  uint32 checkpoint_finalization_timeout = 9;
  // notify_cosmos_zone indicates whether to notify the Cosmos zone of events
  bool notify_cosmos_zone = 10;
  // ibc_transfer_channel_id is the IBC channel ID for the IBC transfer
  // contract. If empty then the reward distribution will be done at the consumer
  // side.
  string ibc_transfer_channel_id = 11;
  // btc_light_client_msg is the initialization message for the BTC light client
  // contract
  bytes btc_light_client_msg = 12;
  // btc_staking_msg is the initialization message for the BTC staking contract
  bytes btc_staking_msg = 13;
  // btc_finality_msg is the initialization message for the BTC finality
  // contract
  bytes btc_finality_msg = 14;
  // consumer_name is the name of this consumer chain
  string consumer_name = 15;
  // consumer_description is a description of this consumer chain
  string consumer_description = 16;
  // admin is the address that controls the Babylon module
  string admin = 17 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgInstantiateBabylonContractsResponse is the Msg/InstantiateBabylonContracts
// response type.
message MsgInstantiateBabylonContractsResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/babylon parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
