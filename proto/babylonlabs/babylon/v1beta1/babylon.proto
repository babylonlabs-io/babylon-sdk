syntax = "proto3";
package babylonlabs.babylon.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/babylonlabs-io/babylon-sdk/x/babylon/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

// Params defines the parameters for the x/babylon module.
message Params {
  option (gogoproto.equal) = true;

  // babylon_contract_code_id is the code ID of the Babylon contract
  uint64 babylon_contract_code_id = 1;
  // btc_light_client_contract_code_id is the code ID of the BTC light client contract
  uint64 btc_light_client_contract_code_id = 2;
  // btc_staking_contract_code_id is the code ID of the BTC staking contract
  uint64 btc_staking_contract_code_id = 3;
  // btc_finality_contract_code_id is the code ID of the BTC finality contract
  uint64 btc_finality_contract_code_id = 4;
  // babylon_contract_address is the address of the Babylon contract
  string babylon_contract_address = 5
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // btc_light_client_contract_address is the address of the BTC light client contract
  string btc_light_client_contract_address = 6
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // btc_staking_contract_address is the address of the BTC staking contract
  string btc_staking_contract_address = 7
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // btc_finality_contract_address is the address of the BTC finality contract
  string btc_finality_contract_address = 8
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // max_gas_begin_blocker defines the maximum gas that can be spent in a
  // contract sudo callback
  uint32 max_gas_begin_blocker = 9;
}
